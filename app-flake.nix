{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    railsBuilder.url = "github:glenndavy/rails-builder";
  };

  outputs = { self, nixpkgs, railsBuilder }:
  let
    system = "x86_64-linux";
    pkgs = import nixpkgs { inherit system; };


    # Create a Ruby environment with the specific version
    ruby = pkgs.ruby.overrideAttrs (old: {
      version = ruby_version;
    });

    # Common build inputs for native extensions
    extraBuildInputs = with pkgs; [ ];

    # Function to build the Rails app with different gem strategies
    buildRailsApp = { gem_strategy }:
      if gem_strategy == "bundix" then
        let
          # Check for gemset.nix (generated by bundix)
          gemset = if builtins.pathExists ./gemset.nix
                   then import ./gemset.nix
                   else throw "Missing gemset.nix. Run 'nix run github:glenndavy/rails-builder#generate-gemset' to generate it.";

          # Validate bundler version in gemset
          bundlerGemVersion = if gemset ? bundler && gemset.bundler ? version
                              then gemset.bundler.version
                              else throw "gemset.nix does not include bundler. Ensure 'bundle package' includes the Bundler gem.";
          _ = if bundlerGemVersion == bundler_version
              then null
              else throw "Bundler version mismatch: Gemfile.lock specifies ${bundler_version}, but gemset.nix specifies ${bundlerGemVersion}.";
        in
          railsBuilder.lib.buildRailsApp {
            inherit ruby gemset;
            src = ./.;
            buildInputs = extraBuildInputs;
          }
      else if gem_strategy == "vendored" then
        let
          # Check for vendored Bundler gem in vendor/cache
          bundlerGem = if builtins.pathExists ./vendor/cache
                       then let
                         gemPath = ./vendor/cache + "/bundler-${bundler_version}.gem";
                       in
                         if builtins.pathExists gemPath
                         then gemPath
                         else throw "Missing vendored Bundler gem at vendor/cache/bundler-${bundler_version}.gem. Please vendor gems with 'bundle package'."
                       else throw "Missing vendor/cache directory. Please vendor gems with 'bundle package'.";

          # Derivation to install the vendored Bundler gem
          bundlerEnv = pkgs.stdenv.mkDerivation {
            name = "bundler-${bundler_version}";
            buildInputs = [ ruby ];
            src = bundlerGem;
            buildPhase = ''
              gem install --no-document --local $src --install-dir $out
            '';
            installPhase = ''
              mkdir -p $out/bin
              ln -s $out/bin/bundler $out/bin/bundle
            '';
            GEM_HOME = "$(pwd)/.gem";
            GEM_PATH = "$(pwd)/.gem";
          };
        in
          railsBuilder.lib.buildRailsApp {
            ruby = ruby;
            gems = null; # Use vendored gems
            src = ./.;
            buildInputs = extraBuildInputs ++ [ bundlerEnv ];
            BUNDLE_PATH = ./vendor/cache;
          }
      else
        throw "Invalid gem_strategy: must be 'bundix' or 'vendored'.";

  in
  {
    # Outputs for different gem strategies
    packages.${system}.bundix = buildRailsApp { gem_strategy = "bundix"; };
    packages.${system}.vendored = buildRailsApp { gem_strategy = "vendored"; };
    packages.${system}.default = buildRailsApp { gem_strategy = "vendored"; }; # Default to vendored for simplicity

    devShells.${system}.default = pkgs.mkShell {
      buildInputs = [ ruby ] ++ commonBuildInputs;
      BUNDLE_PATH = ./vendor/cache;
      shellHook = ''
        echo "Run 'nix run github:glenndavy/rails-builder#generate-gemset' to generate gemset.nix for the bundix strategy."
      '';
    };
  };
}
